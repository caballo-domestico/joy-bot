// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.4
// source: prescription-analyzer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrescriptioAnalyzerClient is the client API for PrescriptioAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrescriptioAnalyzerClient interface {
	GetPrescribedDrugs(ctx context.Context, in *PatientUsername, opts ...grpc.CallOption) (PrescriptioAnalyzer_GetPrescribedDrugsClient, error)
}

type prescriptioAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewPrescriptioAnalyzerClient(cc grpc.ClientConnInterface) PrescriptioAnalyzerClient {
	return &prescriptioAnalyzerClient{cc}
}

func (c *prescriptioAnalyzerClient) GetPrescribedDrugs(ctx context.Context, in *PatientUsername, opts ...grpc.CallOption) (PrescriptioAnalyzer_GetPrescribedDrugsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrescriptioAnalyzer_ServiceDesc.Streams[0], "/panalyzer.PrescriptioAnalyzer/getPrescribedDrugs", opts...)
	if err != nil {
		return nil, err
	}
	x := &prescriptioAnalyzerGetPrescribedDrugsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrescriptioAnalyzer_GetPrescribedDrugsClient interface {
	Recv() (*PrescribedDrug, error)
	grpc.ClientStream
}

type prescriptioAnalyzerGetPrescribedDrugsClient struct {
	grpc.ClientStream
}

func (x *prescriptioAnalyzerGetPrescribedDrugsClient) Recv() (*PrescribedDrug, error) {
	m := new(PrescribedDrug)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrescriptioAnalyzerServer is the server API for PrescriptioAnalyzer service.
// All implementations must embed UnimplementedPrescriptioAnalyzerServer
// for forward compatibility
type PrescriptioAnalyzerServer interface {
	GetPrescribedDrugs(*PatientUsername, PrescriptioAnalyzer_GetPrescribedDrugsServer) error
	mustEmbedUnimplementedPrescriptioAnalyzerServer()
}

// UnimplementedPrescriptioAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedPrescriptioAnalyzerServer struct {
}

func (UnimplementedPrescriptioAnalyzerServer) GetPrescribedDrugs(*PatientUsername, PrescriptioAnalyzer_GetPrescribedDrugsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPrescribedDrugs not implemented")
}
func (UnimplementedPrescriptioAnalyzerServer) mustEmbedUnimplementedPrescriptioAnalyzerServer() {}

// UnsafePrescriptioAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrescriptioAnalyzerServer will
// result in compilation errors.
type UnsafePrescriptioAnalyzerServer interface {
	mustEmbedUnimplementedPrescriptioAnalyzerServer()
}

func RegisterPrescriptioAnalyzerServer(s grpc.ServiceRegistrar, srv PrescriptioAnalyzerServer) {
	s.RegisterService(&PrescriptioAnalyzer_ServiceDesc, srv)
}

func _PrescriptioAnalyzer_GetPrescribedDrugs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PatientUsername)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrescriptioAnalyzerServer).GetPrescribedDrugs(m, &prescriptioAnalyzerGetPrescribedDrugsServer{stream})
}

type PrescriptioAnalyzer_GetPrescribedDrugsServer interface {
	Send(*PrescribedDrug) error
	grpc.ServerStream
}

type prescriptioAnalyzerGetPrescribedDrugsServer struct {
	grpc.ServerStream
}

func (x *prescriptioAnalyzerGetPrescribedDrugsServer) Send(m *PrescribedDrug) error {
	return x.ServerStream.SendMsg(m)
}

// PrescriptioAnalyzer_ServiceDesc is the grpc.ServiceDesc for PrescriptioAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrescriptioAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "panalyzer.PrescriptioAnalyzer",
	HandlerType: (*PrescriptioAnalyzerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getPrescribedDrugs",
			Handler:       _PrescriptioAnalyzer_GetPrescribedDrugs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "prescription-analyzer.proto",
}
